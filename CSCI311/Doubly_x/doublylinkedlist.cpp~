/**
 * @file doublylinkedlist.cpp   Implementation of a Doubly linkedlist for music.
 *
 * @brief
 *    This file implements the functions of doubly linked list
 *    
 *
 * @author Akshay Joshi
 * @date 2/5/15
 */
#include<iostream>
#include <vector>
#include <string>
#include <stdio.h>
#include "doublylinkedlist.h"
using std::cout;
using std::string;
using namespace std;

DoublyLinkedList::DoublyLinkedList()
{
	head = NULL;
	tail = NULL;
	current = NULL;
}

DoublyLinkedList::~DoublyLinkedList()
{
	delete head;
	delete tail;
	delete current;
}
DoublyLinkedList::Node::Node()
{
	this->next = NULL;
	this->prev = NULL;
	this->data = '\0';
}

DoublyLinkedList::Node::~Node()
{
	this->data='\0';
	this->next = NULL;
	this->prev = NULL;
	delete data;
	delete next;
	delete prev;
}

bool DoublyLinkedList::empty()
{
	if ((head == tail) && (head == NULL) && (current==NULL) &&(tail==NULL))
	{
		return true;
	}
	else
	{
		return false;
	}
}

void DoublyLinkedList::append(string &s)
{	
	bool flag = false;
	flag = empty();
	Node *temp = new Node();				//a temporary node is required
	if (flag == true)																							// Check for Head is NULL or not.
	{				
		// If head is null copy data value
		current=tail=head = new Node();
		head->data =  &s;
		tail = head;
		current = head;
	}
	else
	{
		tail->next = temp;
		temp->prev = tail;
		tail=tail->next;
		tail->data = &s;
		current = tail;
	}
}

void DoublyLinkedList::insertBefore(string &s)
{
	Node *temp_previous_node=new Node();
	Node *temporary = new Node();
	if (current != NULL)
	{
		if (current->prev == NULL)
		{
			temporary->next = current;
			temporary->prev = NULL;
			temporary->data = &s;
			current->prev = temporary;
			current = temporary;
			head = temporary;
		}
		else 
		{
			temp_previous_node = current->prev;
			temporary->next = current;
			temporary->prev = temp_previous_node;
			temporary->data = &s;
			current->prev=temporary;
			temp_previous_node->next = temporary;
			current = temporary;
		}
	}
}

void DoublyLinkedList::insertAfter(string &s)
{
	Node *temp_next_node;
	Node *tempo = new Node();
	if (current != NULL)
	{
		if (current == tail)
		{
			tail->next = tempo;
			tempo->prev = tail;
			tail = tail->next;
			tail->data = &s;
			current = tail;
			tempo = tempo->next;
		}
		else
		{
			temp_next_node = current->next;
			tempo->prev = current;
			tempo->next = temp_next_node;
			tempo->data = &s;
			current->next = tempo;
			temp_next_node->prev = tempo;
			current = tempo;
			current->data = &s;
		}
	}
}

void DoublyLinkedList::remove(string &s)
{
	bool flag_empt = false;
	flag_empt = empty();
	if (flag_empt == false)
	{
		string *check = (&s);												//to put the string in check cause cannot compare directly with s
		Node *checker;
		Node *temp_prev;
		Node *temp_next;
		checker = head;
		while (checker != NULL)																				// then temp1 is used which traverse till end
		{
			if ((*checker->data == *check) && (checker!=head) && (checker!=tail))
			{
				temp_next = checker->next;			//made temp next node pointer
				temp_prev = checker->prev;			// made temp previous node pointer
				temp_prev->next = temp_next;
				temp_next->prev = temp_prev;
				current = temp_next;
				delete checker;
				break;
			}

			if ((*checker->data == *check) && (checker == head))
			{
				if (head == tail)
				{
					head = tail =current= NULL;
					delete checker;
					break;
				}
				else
				{
					head = head->next;
					head->prev = NULL;
					current = head;
					delete checker;
					break;
				}
			}
			if ((*checker->data == *check) && (checker==tail))
			{
				tail = tail->prev;
				tail->next = NULL;
				current = tail;
				delete checker;
				break;
			}
			checker = checker->next;
		}
	}
}

void DoublyLinkedList::begin()
{
	current = head;
}
void DoublyLinkedList::end()
{
	current = tail;
}

bool DoublyLinkedList::next()
{
	if (current->next != NULL)
	{
		current = current->next;
		return true;
	}
	else
	{
		return false;
	}

}

bool DoublyLinkedList::prev()
{
	if (current->prev != NULL)
	{
		current = current->prev;
		return true;
	}
	else
	{
		return false;
	}
}

bool DoublyLinkedList::find(string &s)
{
	bool flag_empt = false;
	flag_empt = empty();
	if (flag_empt == false)
	{
		string *check = (&s);												//to put the string in check cause cannot compare directly with s
		Node *checker;
		checker = head;
		while (checker != NULL)																				// then temp1 is used which traverse till end
		{
			if (*checker->data == *check)
			{
				current = checker;
				break;
			}
			checker = checker->next;
		}
	}
	else
	{
		return false;
	}
	return true;
}

const string &DoublyLinkedList::getData()
{
	string *a = '\0';
	if (current != NULL)
	{
		return *current->data;
	}
	else
	{
		return *a;
	}
}
