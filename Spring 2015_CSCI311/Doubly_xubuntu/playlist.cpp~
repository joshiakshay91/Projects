/**
 * @file playlist.cpp   Implementation of a Playlist for music.
 *
 * @brief
 *    Implementation of a Playlist for music. A doubly linked list is
 *    used to store the song names.
 *
 * @author Judy Challinger
 * @Modified by: Akshay Joshi
 * @date 2/5/15
 */

#include <iostream>
#include <string>
#include <fstream>
#include <string>
#include <sstream>

#include "playlist.h"
#include "doublylinkedlist.h"
using namespace std;
using std::string;
using std::cin;
using std::cout;
using std::endl;

/**
 * Process a playlist command.
 *
 * Gets an entire line from std::cin, extracts the first word as the command,
 * and calls the appropriate processing function. Invalid commands are
 * ignored.
 */
void Playlist::processCommand() 
{
	string s;
	//	ifstream myfile("commands.txt");
	//	string word;
	//	if (myfile.is_open())
	//	{
	//		while
	(getline(cin, s));
	{
		string command = s.substr(0, s.find(' '));   // get first word in string
		s.erase(0, s.find(' ') + 1);
		if (command == "appendSong")
		{
			string *a = new string(s);
			dll.append(*a);
		}
		else if (command== "removeSong")
		{
			dll.remove(s);
			//dll.getData();
		}
		else if (command == "playForward")
		{
			string ptr;
			bool flag = false;
			bool empt_flag = false;
			empt_flag = dll.empty();
			cout << "\nplaying forward: \n";
			if (empt_flag == false)
			{
				ptr = dll.getData();
				cout << ptr << endl;
				flag = dll.next();
				if (flag == true)
				{
					while (flag != false)
					{
						ptr = dll.getData();
						cout << ptr << endl;
						flag = dll.next();
					}
				}
			}
		}
		else if (command =="playReverse" )
		{
			string ptr;
			bool flag = false;
			bool empt_flag = false;
			empt_flag = dll.empty();
			cout << "\nplaying reverse: \n";
			if (empt_flag == false)
			{
				ptr = dll.getData();
				cout << ptr << endl;
				flag = dll.prev();
				if (flag == true)
				{
					while (flag != false)
					{
						ptr = dll.getData();
						cout << ptr << endl;
						flag = dll.prev();
					}
				}
			}
		}
		else if (command=="insertBefore")
		{
			string *a = new string(s);
			dll.insertBefore(*a);
		}
		else if (command == "insertAfter")
		{
			string *a = new string(s);
			dll.insertAfter(*a);
		}
		else if(command =="gotoFirstSong")
		{
			dll.begin();		}
		else if (command == "gotoLastSong")
		{
			dll.end();
		}
		else if (command == "playCurrent")
		{

			bool flag_empt = false;
			string ptr;
			flag_empt = dll.empty();
			if (flag_empt == true)
			{
				cout << "\nplaying current: ";
			}
			else
			{
				ptr = dll.getData();
				cout << "\nplaying current: " << ptr << endl;
			}
		}
		else if (command == "gotoSong")
		{

			bool find_flag = false;
			find_flag=dll.find(s);
			if (find_flag==true)
			{

			}

		}
		else if (command == "nextSong")
		{
			bool nextflag = false;
			nextflag=dll.next();
			if(nextflag==true)
			{

			}
		}
		else if (command == "prevSong")
		{
			bool prevflag = false;
			prevflag = dll.prev();
			if (prevflag==true)
			{

			}
		}
		else
		{

		}
	}

	//	myfile.close();
	//	getline(cin, s);                             // get everything to endl
	// DoublyLinkedList();
}

/**
 * The Playlist main loop will process command lines until eof.
 */
void Playlist::mainLoop() 
{
	while (!cin.eof()) processCommand();         // process all commands
}

/**
 * The main entry point for the program.
 */
int main()
{
	Playlist myPlaylist;
	myPlaylist.mainLoop();
	return 0;
}
